/* 
 * Upcloud api
 *
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Upcloud.Client.SwaggerDateConverter;

namespace Upcloud.Model
{
    /// <summary>
    /// ServerLoginUser
    /// </summary>
    [DataContract]
    public partial class ServerLoginUser :  IEquatable<ServerLoginUser>
    {
        /// <summary>
        /// Defines CreatePassword
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CreatePasswordEnum
        {
            
            /// <summary>
            /// Enum Yes for value: yes
            /// </summary>
            [EnumMember(Value = "yes")]
            Yes = 1,
            
            /// <summary>
            /// Enum No for value: no
            /// </summary>
            [EnumMember(Value = "no")]
            No = 2
        }

        /// <summary>
        /// Gets or Sets CreatePassword
        /// </summary>
        [DataMember(Name="create_password", EmitDefaultValue=true)]
        public CreatePasswordEnum? CreatePassword { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ServerLoginUser" /> class.
        /// </summary>
        /// <param name="createPassword">createPassword (default to CreatePasswordEnum.Yes).</param>
        /// <param name="username">username.</param>
        /// <param name="sshKeys">sshKeys.</param>
        public ServerLoginUser(CreatePasswordEnum? createPassword = CreatePasswordEnum.Yes, string username = default(string), ServerLoginUserSshKeys sshKeys = default(ServerLoginUserSshKeys))
        {
            // use default value if no "createPassword" provided
            if (createPassword == null)
            {
                this.CreatePassword = CreatePasswordEnum.Yes;
            }
            else
            {
                this.CreatePassword = createPassword;
            }
            this.Username = username;
            this.SshKeys = sshKeys;
        }
        

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets SshKeys
        /// </summary>
        [DataMember(Name="ssh_keys", EmitDefaultValue=true)]
        public ServerLoginUserSshKeys SshKeys { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerLoginUser {\n");
            sb.Append("  CreatePassword: ").Append(CreatePassword).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  SshKeys: ").Append(SshKeys).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ServerLoginUser);
        }

        /// <summary>
        /// Returns true if ServerLoginUser instances are equal
        /// </summary>
        /// <param name="input">Instance of ServerLoginUser to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerLoginUser input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatePassword == input.CreatePassword ||
                    (this.CreatePassword != null &&
                    this.CreatePassword.Equals(input.CreatePassword))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.SshKeys == input.SshKeys ||
                    (this.SshKeys != null &&
                    this.SshKeys.Equals(input.SshKeys))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatePassword != null)
                    hashCode = hashCode * 59 + this.CreatePassword.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.SshKeys != null)
                    hashCode = hashCode * 59 + this.SshKeys.GetHashCode();
                return hashCode;
            }
        }
    }

}
