/* 
 * Upcloud api
 *
 * The UpCloud API consists of operations used to control resources on UpCloud. The API is a web service interface. HTTPS is used to connect to the API. The API follows the principles of a RESTful web service wherever possible. The base URL for all API operations is  https://api.upcloud.com/. All API operations require authentication.
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = Upcloud.Client.SwaggerDateConverter;

namespace Upcloud.Model
{
    /// <summary>
    /// The server configuration defines which storage devices the server is attached to, which IP addresses can be used and how the server can be reached for remote management. A server must have at least one storage device attached in order to be started. Servers may have from zero to five public IPv4 and IPv6 addresses. All servers have a private IP address that cannot be removed.
    /// </summary>
    [DataContract]
    public partial class Server :  IEquatable<Server>
    {
        /// <summary>
        /// The storage device boot order.
        /// </summary>
        /// <value>The storage device boot order.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BootOrderEnum
        {
            
            /// <summary>
            /// Enum Disk for value: disk
            /// </summary>
            [EnumMember(Value = "disk")]
            Disk = 1,
            
            /// <summary>
            /// Enum Cdrom for value: cdrom
            /// </summary>
            [EnumMember(Value = "cdrom")]
            Cdrom = 2,
            
            /// <summary>
            /// Enum Diskcdrom for value: disk,cdrom
            /// </summary>
            [EnumMember(Value = "disk,cdrom")]
            Diskcdrom = 3,
            
            /// <summary>
            /// Enum Cdromdisk for value: cdrom,disk
            /// </summary>
            [EnumMember(Value = "cdrom,disk")]
            Cdromdisk = 4
        }

        /// <summary>
        /// The storage device boot order.
        /// </summary>
        /// <value>The storage device boot order.</value>
        [DataMember(Name="boot_order", EmitDefaultValue=false)]
        public BootOrderEnum? BootOrder { get; set; }
        /// <summary>
        /// The state of the server firewall rules.
        /// </summary>
        /// <value>The state of the server firewall rules.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FirewallEnum
        {
            
            /// <summary>
            /// Enum On for value: on
            /// </summary>
            [EnumMember(Value = "on")]
            On = 1,
            
            /// <summary>
            /// Enum Off for value: off
            /// </summary>
            [EnumMember(Value = "off")]
            Off = 2
        }

        /// <summary>
        /// The state of the server firewall rules.
        /// </summary>
        /// <value>The state of the server firewall rules.</value>
        [DataMember(Name="firewall", EmitDefaultValue=false)]
        public FirewallEnum? Firewall { get; set; }
        /// <summary>
        /// The model of the server&#39;s network interfaces.
        /// </summary>
        /// <value>The model of the server&#39;s network interfaces.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NicModelEnum
        {
            
            /// <summary>
            /// Enum E1000 for value: e1000
            /// </summary>
            [EnumMember(Value = "e1000")]
            E1000 = 1,
            
            /// <summary>
            /// Enum Virtio for value: virtio
            /// </summary>
            [EnumMember(Value = "virtio")]
            Virtio = 2,
            
            /// <summary>
            /// Enum Rtl8139 for value: rtl8139
            /// </summary>
            [EnumMember(Value = "rtl8139")]
            Rtl8139 = 3
        }

        /// <summary>
        /// The model of the server&#39;s network interfaces.
        /// </summary>
        /// <value>The model of the server&#39;s network interfaces.</value>
        [DataMember(Name="nic_model", EmitDefaultValue=false)]
        public NicModelEnum? NicModel { get; set; }
        /// <summary>
        /// The delivery method for the server&#39;s root password.
        /// </summary>
        /// <value>The delivery method for the server&#39;s root password.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PasswordDeliveryEnum
        {
            
            /// <summary>
            /// Enum None for value: none
            /// </summary>
            [EnumMember(Value = "none")]
            None = 1,
            
            /// <summary>
            /// Enum Email for value: email
            /// </summary>
            [EnumMember(Value = "email")]
            Email = 2,
            
            /// <summary>
            /// Enum Sms for value: sms
            /// </summary>
            [EnumMember(Value = "sms")]
            Sms = 3
        }

        /// <summary>
        /// The delivery method for the server&#39;s root password.
        /// </summary>
        /// <value>The delivery method for the server&#39;s root password.</value>
        [DataMember(Name="password_delivery", EmitDefaultValue=false)]
        public PasswordDeliveryEnum? PasswordDelivery { get; set; }
        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public ServerState? State { get; set; }
        /// <summary>
        /// The model of the server&#39;s video interface.
        /// </summary>
        /// <value>The model of the server&#39;s video interface.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VideoModelEnum
        {
            
            /// <summary>
            /// Enum Vga for value: vga
            /// </summary>
            [EnumMember(Value = "vga")]
            Vga = 1,
            
            /// <summary>
            /// Enum Cirrus for value: cirrus
            /// </summary>
            [EnumMember(Value = "cirrus")]
            Cirrus = 2
        }

        /// <summary>
        /// The model of the server&#39;s video interface.
        /// </summary>
        /// <value>The model of the server&#39;s video interface.</value>
        [DataMember(Name="video_model", EmitDefaultValue=false)]
        public VideoModelEnum? VideoModel { get; set; }
        /// <summary>
        /// The state of the VNC remote access service.
        /// </summary>
        /// <value>The state of the VNC remote access service.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VncEnum
        {
            
            /// <summary>
            /// Enum On for value: on
            /// </summary>
            [EnumMember(Value = "on")]
            On = 1,
            
            /// <summary>
            /// Enum Off for value: off
            /// </summary>
            [EnumMember(Value = "off")]
            Off = 2
        }

        /// <summary>
        /// The state of the VNC remote access service.
        /// </summary>
        /// <value>The state of the VNC remote access service.</value>
        [DataMember(Name="vnc", EmitDefaultValue=false)]
        public VncEnum? Vnc { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Server" /> class.
        /// </summary>
        /// <param name="bootOrder">The storage device boot order..</param>
        /// <param name="coreNumber">The number of CPU cores dedicated to the server. See List server configurations..</param>
        /// <param name="firewall">The state of the server firewall rules. (default to FirewallEnum.On).</param>
        /// <param name="host">host.</param>
        /// <param name="avoidHost">avoidHost.</param>
        /// <param name="hostname">A valid hostname, e.g. host.example.com. The maximum length is 128 characters..</param>
        /// <param name="ipAddresses">ipAddresses.</param>
        /// <param name="license">license.</param>
        /// <param name="loginUser">loginUser.</param>
        /// <param name="memoryAmount">The amount of main memory in megabytes. See List server configurations..</param>
        /// <param name="nicModel">The model of the server&#39;s network interfaces. (default to NicModelEnum.Virtio).</param>
        /// <param name="passwordDelivery">The delivery method for the server&#39;s root password. (default to PasswordDeliveryEnum.Email).</param>
        /// <param name="plan">The pricing plan used. If a plan is selected, the core_number and  memory_amount must match the plan if they are present. (default to &quot;custom&quot;).</param>
        /// <param name="planIpv4Bytes">planIpv4Bytes.</param>
        /// <param name="planIpv6Bytes">planIpv6Bytes.</param>
        /// <param name="state">state.</param>
        /// <param name="storageDevices">storageDevices.</param>
        /// <param name="tags">tags.</param>
        /// <param name="timezone">A timezone identifier, e.g. Europe/Helsinki. See Timezones..</param>
        /// <param name="title">A short description..</param>
        /// <param name="userData">Defines URL for a server setup script, or the script body itself..</param>
        /// <param name="uuid">uuid.</param>
        /// <param name="videoModel">The model of the server&#39;s video interface. (default to VideoModelEnum.Vga).</param>
        /// <param name="vnc">The state of the VNC remote access service. (default to VncEnum.Off).</param>
        /// <param name="vncHost">vncHost.</param>
        /// <param name="vncPassword">The VNC remote access password..</param>
        /// <param name="vncPort">vncPort.</param>
        /// <param name="zone">zone.</param>
        public Server(BootOrderEnum? bootOrder = default(BootOrderEnum?), decimal? coreNumber = default(decimal?), FirewallEnum? firewall = FirewallEnum.On, decimal? host = default(decimal?), decimal? avoidHost = default(decimal?), string hostname = default(string), IpAddresses ipAddresses = default(IpAddresses), decimal? license = default(decimal?), ServerLoginUser loginUser = default(ServerLoginUser), decimal? memoryAmount = default(decimal?), NicModelEnum? nicModel = NicModelEnum.Virtio, PasswordDeliveryEnum? passwordDelivery = PasswordDeliveryEnum.Email, string plan = "custom", decimal? planIpv4Bytes = default(decimal?), decimal? planIpv6Bytes = default(decimal?), ServerState? state = default(ServerState?), ServerStorageDevices storageDevices = default(ServerStorageDevices), ServerTags tags = default(ServerTags), string timezone = default(string), string title = default(string), string userData = default(string), Guid? uuid = default(Guid?), VideoModelEnum? videoModel = VideoModelEnum.Vga, VncEnum? vnc = VncEnum.Off, string vncHost = default(string), string vncPassword = default(string), string vncPort = default(string), string zone = default(string))
        {
            this.BootOrder = bootOrder;
            this.CoreNumber = coreNumber;
            // use default value if no "firewall" provided
            if (firewall == null)
            {
                this.Firewall = FirewallEnum.On;
            }
            else
            {
                this.Firewall = firewall;
            }
            this.Host = host;
            this.AvoidHost = avoidHost;
            this.Hostname = hostname;
            this.IpAddresses = ipAddresses;
            this.License = license;
            this.LoginUser = loginUser;
            this.MemoryAmount = memoryAmount;
            // use default value if no "nicModel" provided
            if (nicModel == null)
            {
                this.NicModel = NicModelEnum.Virtio;
            }
            else
            {
                this.NicModel = nicModel;
            }
            // use default value if no "passwordDelivery" provided
            if (passwordDelivery == null)
            {
                this.PasswordDelivery = PasswordDeliveryEnum.Email;
            }
            else
            {
                this.PasswordDelivery = passwordDelivery;
            }
            // use default value if no "plan" provided
            if (plan == null)
            {
                this.Plan = "custom";
            }
            else
            {
                this.Plan = plan;
            }
            this.PlanIpv4Bytes = planIpv4Bytes;
            this.PlanIpv6Bytes = planIpv6Bytes;
            this.State = state;
            this.StorageDevices = storageDevices;
            this.Tags = tags;
            this.Timezone = timezone;
            this.Title = title;
            this.UserData = userData;
            this.Uuid = uuid;
            // use default value if no "videoModel" provided
            if (videoModel == null)
            {
                this.VideoModel = VideoModelEnum.Vga;
            }
            else
            {
                this.VideoModel = videoModel;
            }
            // use default value if no "vnc" provided
            if (vnc == null)
            {
                this.Vnc = VncEnum.Off;
            }
            else
            {
                this.Vnc = vnc;
            }
            this.VncHost = vncHost;
            this.VncPassword = vncPassword;
            this.VncPort = vncPort;
            this.Zone = zone;
        }
        

        /// <summary>
        /// The number of CPU cores dedicated to the server. See List server configurations.
        /// </summary>
        /// <value>The number of CPU cores dedicated to the server. See List server configurations.</value>
        [DataMember(Name="core_number", EmitDefaultValue=false)]
        public decimal? CoreNumber { get; set; }


        /// <summary>
        /// Gets or Sets Host
        /// </summary>
        [DataMember(Name="host", EmitDefaultValue=false)]
        public decimal? Host { get; set; }

        /// <summary>
        /// Gets or Sets AvoidHost
        /// </summary>
        [DataMember(Name="avoid_host", EmitDefaultValue=false)]
        public decimal? AvoidHost { get; set; }

        /// <summary>
        /// A valid hostname, e.g. host.example.com. The maximum length is 128 characters.
        /// </summary>
        /// <value>A valid hostname, e.g. host.example.com. The maximum length is 128 characters.</value>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or Sets IpAddresses
        /// </summary>
        [DataMember(Name="ip_addresses", EmitDefaultValue=false)]
        public IpAddresses IpAddresses { get; set; }

        /// <summary>
        /// Gets or Sets License
        /// </summary>
        [DataMember(Name="license", EmitDefaultValue=false)]
        public decimal? License { get; set; }

        /// <summary>
        /// Gets or Sets LoginUser
        /// </summary>
        [DataMember(Name="login_user", EmitDefaultValue=false)]
        public ServerLoginUser LoginUser { get; set; }

        /// <summary>
        /// The amount of main memory in megabytes. See List server configurations.
        /// </summary>
        /// <value>The amount of main memory in megabytes. See List server configurations.</value>
        [DataMember(Name="memory_amount", EmitDefaultValue=false)]
        public decimal? MemoryAmount { get; set; }



        /// <summary>
        /// The pricing plan used. If a plan is selected, the core_number and  memory_amount must match the plan if they are present.
        /// </summary>
        /// <value>The pricing plan used. If a plan is selected, the core_number and  memory_amount must match the plan if they are present.</value>
        [DataMember(Name="plan", EmitDefaultValue=false)]
        public string Plan { get; set; }

        /// <summary>
        /// Gets or Sets PlanIpv4Bytes
        /// </summary>
        [DataMember(Name="plan_ipv4_bytes", EmitDefaultValue=false)]
        public decimal? PlanIpv4Bytes { get; set; }

        /// <summary>
        /// Gets or Sets PlanIpv6Bytes
        /// </summary>
        [DataMember(Name="plan_ipv6_bytes", EmitDefaultValue=false)]
        public decimal? PlanIpv6Bytes { get; set; }


        /// <summary>
        /// Gets or Sets StorageDevices
        /// </summary>
        [DataMember(Name="storage_devices", EmitDefaultValue=false)]
        public ServerStorageDevices StorageDevices { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public ServerTags Tags { get; set; }

        /// <summary>
        /// A timezone identifier, e.g. Europe/Helsinki. See Timezones.
        /// </summary>
        /// <value>A timezone identifier, e.g. Europe/Helsinki. See Timezones.</value>
        [DataMember(Name="timezone", EmitDefaultValue=false)]
        public string Timezone { get; set; }

        /// <summary>
        /// A short description.
        /// </summary>
        /// <value>A short description.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Defines URL for a server setup script, or the script body itself.
        /// </summary>
        /// <value>Defines URL for a server setup script, or the script body itself.</value>
        [DataMember(Name="user_data", EmitDefaultValue=false)]
        public string UserData { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid? Uuid { get; set; }



        /// <summary>
        /// Gets or Sets VncHost
        /// </summary>
        [DataMember(Name="vnc_host", EmitDefaultValue=false)]
        public string VncHost { get; set; }

        /// <summary>
        /// The VNC remote access password.
        /// </summary>
        /// <value>The VNC remote access password.</value>
        [DataMember(Name="vnc_password", EmitDefaultValue=false)]
        public string VncPassword { get; set; }

        /// <summary>
        /// Gets or Sets VncPort
        /// </summary>
        [DataMember(Name="vnc_port", EmitDefaultValue=false)]
        public string VncPort { get; set; }

        /// <summary>
        /// Gets or Sets Zone
        /// </summary>
        [DataMember(Name="zone", EmitDefaultValue=false)]
        public string Zone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Server {\n");
            sb.Append("  BootOrder: ").Append(BootOrder).Append("\n");
            sb.Append("  CoreNumber: ").Append(CoreNumber).Append("\n");
            sb.Append("  Firewall: ").Append(Firewall).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  AvoidHost: ").Append(AvoidHost).Append("\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  License: ").Append(License).Append("\n");
            sb.Append("  LoginUser: ").Append(LoginUser).Append("\n");
            sb.Append("  MemoryAmount: ").Append(MemoryAmount).Append("\n");
            sb.Append("  NicModel: ").Append(NicModel).Append("\n");
            sb.Append("  PasswordDelivery: ").Append(PasswordDelivery).Append("\n");
            sb.Append("  Plan: ").Append(Plan).Append("\n");
            sb.Append("  PlanIpv4Bytes: ").Append(PlanIpv4Bytes).Append("\n");
            sb.Append("  PlanIpv6Bytes: ").Append(PlanIpv6Bytes).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StorageDevices: ").Append(StorageDevices).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  VideoModel: ").Append(VideoModel).Append("\n");
            sb.Append("  Vnc: ").Append(Vnc).Append("\n");
            sb.Append("  VncHost: ").Append(VncHost).Append("\n");
            sb.Append("  VncPassword: ").Append(VncPassword).Append("\n");
            sb.Append("  VncPort: ").Append(VncPort).Append("\n");
            sb.Append("  Zone: ").Append(Zone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Server);
        }

        /// <summary>
        /// Returns true if Server instances are equal
        /// </summary>
        /// <param name="input">Instance of Server to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Server input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BootOrder == input.BootOrder ||
                    (this.BootOrder != null &&
                    this.BootOrder.Equals(input.BootOrder))
                ) && 
                (
                    this.CoreNumber == input.CoreNumber ||
                    (this.CoreNumber != null &&
                    this.CoreNumber.Equals(input.CoreNumber))
                ) && 
                (
                    this.Firewall == input.Firewall ||
                    (this.Firewall != null &&
                    this.Firewall.Equals(input.Firewall))
                ) && 
                (
                    this.Host == input.Host ||
                    (this.Host != null &&
                    this.Host.Equals(input.Host))
                ) && 
                (
                    this.AvoidHost == input.AvoidHost ||
                    (this.AvoidHost != null &&
                    this.AvoidHost.Equals(input.AvoidHost))
                ) && 
                (
                    this.Hostname == input.Hostname ||
                    (this.Hostname != null &&
                    this.Hostname.Equals(input.Hostname))
                ) && 
                (
                    this.IpAddresses == input.IpAddresses ||
                    (this.IpAddresses != null &&
                    this.IpAddresses.Equals(input.IpAddresses))
                ) && 
                (
                    this.License == input.License ||
                    (this.License != null &&
                    this.License.Equals(input.License))
                ) && 
                (
                    this.LoginUser == input.LoginUser ||
                    (this.LoginUser != null &&
                    this.LoginUser.Equals(input.LoginUser))
                ) && 
                (
                    this.MemoryAmount == input.MemoryAmount ||
                    (this.MemoryAmount != null &&
                    this.MemoryAmount.Equals(input.MemoryAmount))
                ) && 
                (
                    this.NicModel == input.NicModel ||
                    (this.NicModel != null &&
                    this.NicModel.Equals(input.NicModel))
                ) && 
                (
                    this.PasswordDelivery == input.PasswordDelivery ||
                    (this.PasswordDelivery != null &&
                    this.PasswordDelivery.Equals(input.PasswordDelivery))
                ) && 
                (
                    this.Plan == input.Plan ||
                    (this.Plan != null &&
                    this.Plan.Equals(input.Plan))
                ) && 
                (
                    this.PlanIpv4Bytes == input.PlanIpv4Bytes ||
                    (this.PlanIpv4Bytes != null &&
                    this.PlanIpv4Bytes.Equals(input.PlanIpv4Bytes))
                ) && 
                (
                    this.PlanIpv6Bytes == input.PlanIpv6Bytes ||
                    (this.PlanIpv6Bytes != null &&
                    this.PlanIpv6Bytes.Equals(input.PlanIpv6Bytes))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StorageDevices == input.StorageDevices ||
                    (this.StorageDevices != null &&
                    this.StorageDevices.Equals(input.StorageDevices))
                ) && 
                (
                    this.Tags == input.Tags ||
                    (this.Tags != null &&
                    this.Tags.Equals(input.Tags))
                ) && 
                (
                    this.Timezone == input.Timezone ||
                    (this.Timezone != null &&
                    this.Timezone.Equals(input.Timezone))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.UserData == input.UserData ||
                    (this.UserData != null &&
                    this.UserData.Equals(input.UserData))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.VideoModel == input.VideoModel ||
                    (this.VideoModel != null &&
                    this.VideoModel.Equals(input.VideoModel))
                ) && 
                (
                    this.Vnc == input.Vnc ||
                    (this.Vnc != null &&
                    this.Vnc.Equals(input.Vnc))
                ) && 
                (
                    this.VncHost == input.VncHost ||
                    (this.VncHost != null &&
                    this.VncHost.Equals(input.VncHost))
                ) && 
                (
                    this.VncPassword == input.VncPassword ||
                    (this.VncPassword != null &&
                    this.VncPassword.Equals(input.VncPassword))
                ) && 
                (
                    this.VncPort == input.VncPort ||
                    (this.VncPort != null &&
                    this.VncPort.Equals(input.VncPort))
                ) && 
                (
                    this.Zone == input.Zone ||
                    (this.Zone != null &&
                    this.Zone.Equals(input.Zone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BootOrder != null)
                    hashCode = hashCode * 59 + this.BootOrder.GetHashCode();
                if (this.CoreNumber != null)
                    hashCode = hashCode * 59 + this.CoreNumber.GetHashCode();
                if (this.Firewall != null)
                    hashCode = hashCode * 59 + this.Firewall.GetHashCode();
                if (this.Host != null)
                    hashCode = hashCode * 59 + this.Host.GetHashCode();
                if (this.AvoidHost != null)
                    hashCode = hashCode * 59 + this.AvoidHost.GetHashCode();
                if (this.Hostname != null)
                    hashCode = hashCode * 59 + this.Hostname.GetHashCode();
                if (this.IpAddresses != null)
                    hashCode = hashCode * 59 + this.IpAddresses.GetHashCode();
                if (this.License != null)
                    hashCode = hashCode * 59 + this.License.GetHashCode();
                if (this.LoginUser != null)
                    hashCode = hashCode * 59 + this.LoginUser.GetHashCode();
                if (this.MemoryAmount != null)
                    hashCode = hashCode * 59 + this.MemoryAmount.GetHashCode();
                if (this.NicModel != null)
                    hashCode = hashCode * 59 + this.NicModel.GetHashCode();
                if (this.PasswordDelivery != null)
                    hashCode = hashCode * 59 + this.PasswordDelivery.GetHashCode();
                if (this.Plan != null)
                    hashCode = hashCode * 59 + this.Plan.GetHashCode();
                if (this.PlanIpv4Bytes != null)
                    hashCode = hashCode * 59 + this.PlanIpv4Bytes.GetHashCode();
                if (this.PlanIpv6Bytes != null)
                    hashCode = hashCode * 59 + this.PlanIpv6Bytes.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StorageDevices != null)
                    hashCode = hashCode * 59 + this.StorageDevices.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Timezone != null)
                    hashCode = hashCode * 59 + this.Timezone.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.UserData != null)
                    hashCode = hashCode * 59 + this.UserData.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                if (this.VideoModel != null)
                    hashCode = hashCode * 59 + this.VideoModel.GetHashCode();
                if (this.Vnc != null)
                    hashCode = hashCode * 59 + this.Vnc.GetHashCode();
                if (this.VncHost != null)
                    hashCode = hashCode * 59 + this.VncHost.GetHashCode();
                if (this.VncPassword != null)
                    hashCode = hashCode * 59 + this.VncPassword.GetHashCode();
                if (this.VncPort != null)
                    hashCode = hashCode * 59 + this.VncPort.GetHashCode();
                if (this.Zone != null)
                    hashCode = hashCode * 59 + this.Zone.GetHashCode();
                return hashCode;
            }
        }
    }

}
